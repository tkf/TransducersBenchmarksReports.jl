var documenterSearchIndex = {"docs":
[{"location":"#TransducersBenchmarksReports.jl-1","page":"Home","title":"TransducersBenchmarksReports.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"},{"location":"generated/results/#Benchmark-Report-for-*/home/travis/.julia/packages/Transducers/jTysw*-1","page":"Results","title":"Benchmark Report for /home/travis/.julia/packages/Transducers/jTysw","text":"","category":"section"},{"location":"generated/results/#Job-Properties-1","page":"Results","title":"Job Properties","text":"","category":"section"},{"location":"generated/results/#","page":"Results","title":"Results","text":"Time of benchmark: 14 Jul 2019 - 0:43\nPackage commit: non gi\nJulia commit: 55e36c\nJulia command flags: None\nEnvironment variables: OMP_NUM_THREADS => 1 JULIA_NUM_THREADS => 1","category":"page"},{"location":"generated/results/#Results-1","page":"Results","title":"Results","text":"","category":"section"},{"location":"generated/results/#","page":"Results","title":"Results","text":"Below is a table of this job's results, obtained by running the benchmarks. The values listed in the ID column have the structure [parent_group, child_group, ..., key], and can be used to index into the BaseBenchmarks suite to retrieve the corresponding benchmarks. The percentages accompanying time and memory values in the below table are noise tolerances. The \"true\" time/memory value for a given benchmark is expected to fall within this percentage of the reported value. An empty cell means that the value was zero.","category":"page"},{"location":"generated/results/#","page":"Results","title":"Results","text":"ID time GC time memory allocations\n[\"dot\", \"blas\"] 2.182 μs (5%)   \n[\"dot\", \"man\"] 2.166 μs (5%)   \n[\"dot\", \"rf\"] 2.155 μs (5%)   \n[\"dot\", \"xf\"] 2.160 μs (5%)   \n[\"filter_map_map!\", \"man\"] 77.766 μs (5%)   \n[\"filter_map_map!\", \"xf\"] 81.675 μs (5%)  144 bytes (1%) 8\n[\"filter_map_reduce\", \"man\"] 266.195 μs (5%)   \n[\"filter_map_reduce\", \"xf\"] 266.253 μs (5%)   \n[\"gemm\", \"linalg\", \"256\"] 1.176 ms (5%)   \n[\"gemm\", \"linalg\", \"32\"] 5.035 μs (5%)   \n[\"gemm\", \"linalg\", \"8\"] 357.576 ns (5%)   \n[\"gemm\", \"man\", \"false\", \"256\"] 3.969 ms (5%)   \n[\"gemm\", \"man\", \"false\", \"32\"] 8.004 μs (5%)   \n[\"gemm\", \"man\", \"false\", \"8\"] 477.841 ns (5%)   \n[\"gemm\", \"man\", \"ivdep\", \"256\"] 3.939 ms (5%)   \n[\"gemm\", \"man\", \"ivdep\", \"32\"] 7.226 μs (5%)   \n[\"gemm\", \"man\", \"ivdep\", \"8\"] 424.457 ns (5%)   \n[\"gemm\", \"man\", \"true\", \"256\"] 3.969 ms (5%)   \n[\"gemm\", \"man\", \"true\", \"32\"] 8.368 μs (5%)   \n[\"gemm\", \"man\", \"true\", \"8\"] 459.234 ns (5%)   \n[\"gemm\", \"xf\", \"false\", \"256\"] 16.343 ms (5%)  96 bytes (1%) 4\n[\"gemm\", \"xf\", \"false\", \"32\"] 32.637 μs (5%)  96 bytes (1%) 4\n[\"gemm\", \"xf\", \"false\", \"8\"] 663.867 ns (5%)  96 bytes (1%) 4\n[\"gemm\", \"xf\", \"ivdep\", \"256\"] 3.974 ms (5%)  96 bytes (1%) 4\n[\"gemm\", \"xf\", \"ivdep\", \"32\"] 8.777 μs (5%)  96 bytes (1%) 4\n[\"gemm\", \"xf\", \"ivdep\", \"8\"] 567.853 ns (5%)  96 bytes (1%) 4\n[\"gemm\", \"xf\", \"true\", \"256\"] 15.355 ms (5%)  96 bytes (1%) 4\n[\"gemm\", \"xf\", \"true\", \"32\"] 31.370 μs (5%)  96 bytes (1%) 4\n[\"gemm\", \"xf\", \"true\", \"8\"] 738.320 ns (5%)  96 bytes (1%) 4\n[\"missing_argmax\", \"man\"] 1.363 μs (5%)  32 bytes (1%) 1\n[\"missing_argmax\", \"rf\"] 1.499 μs (5%)  32 bytes (1%) 1\n[\"missing_argmax\", \"xf\"] 1.510 μs (5%)  32 bytes (1%) 1\n[\"missing_dot\", \"equiv\"] 1.613 μs (5%)  16 bytes (1%) 1\n[\"missing_dot\", \"man\"] 1.488 μs (5%)  16 bytes (1%) 1\n[\"missing_dot\", \"naive\"] 5.234 μs (5%)  16 bytes (1%) 1\n[\"missing_dot\", \"rf\"] 1.505 μs (5%)  16 bytes (1%) 1\n[\"missing_dot\", \"rf_nota\"] 1.655 μs (5%)  16 bytes (1%) 1\n[\"missing_dot\", \"xf\"] 231.843 μs (5%)  74.05 KiB (1%) 3864\n[\"missing_dot\", \"xf_nota\"] 229.674 μs (5%)  74.00 KiB (1%) 3865\n[\"partition_by\", \"man\"] 2.227 ms (5%)  352 bytes (1%) 4\n[\"partition_by\", \"xf\"] 2.085 ms (5%)  512 bytes (1%) 8","category":"page"},{"location":"generated/results/#Benchmark-Group-List-1","page":"Results","title":"Benchmark Group List","text":"","category":"section"},{"location":"generated/results/#","page":"Results","title":"Results","text":"Here's a list of all the benchmark groups executed by this job:","category":"page"},{"location":"generated/results/#","page":"Results","title":"Results","text":"[\"dot\"]\n[\"filter_map_map!\"]\n[\"filter_map_reduce\"]\n[\"gemm\", \"linalg\"]\n[\"gemm\", \"man\", \"false\"]\n[\"gemm\", \"man\", \"ivdep\"]\n[\"gemm\", \"man\", \"true\"]\n[\"gemm\", \"xf\", \"false\"]\n[\"gemm\", \"xf\", \"ivdep\"]\n[\"gemm\", \"xf\", \"true\"]\n[\"missing_argmax\"]\n[\"missing_dot\"]\n[\"partition_by\"]","category":"page"},{"location":"generated/results/#Julia-versioninfo-1","page":"Results","title":"Julia versioninfo","text":"","category":"section"},{"location":"generated/results/#","page":"Results","title":"Results","text":"Julia Version 1.1.1\nCommit 55e36cc308 (2019-05-16 04:10 UTC)\nPlatform Info:\n  OS: Linux (x86_64-pc-linux-gnu)\n      Ubuntu 16.04.6 LTS\n  uname: Linux 4.15.0-1028-gcp #29~16.04.1-Ubuntu SMP Tue Feb 12 16:31:10 UTC 2019 x86_64 x86_64\n  CPU: Intel(R) Xeon(R) CPU @ 2.30GHz: \n              speed         user         nice          sys         idle          irq\n       #1  2300 MHz      24428 s          0 s       1500 s      20719 s          0 s\n       #2  2300 MHz      20808 s          0 s       1444 s      24796 s          0 s\n       \n  Memory: 7.297847747802734 GB (5271.7890625 MB free)\n  Uptime: 478.0 sec\n  Load Avg:  1.0  0.8984375  0.4970703125\n  WORD_SIZE: 64\n  LIBM: libopenlibm\n  LLVM: libLLVM-6.0.1 (ORCJIT, haswell)","category":"page"},{"location":"gemm/#bench_gemm.jl-result-1","page":"GEMM","title":"bench_gemm.jl result","text":"","category":"section"},{"location":"gemm/#","page":"GEMM","title":"GEMM","text":"Base.include(@__MODULE__, \"../reporters/gemm.jl\")\nopen(io -> show(io, \"image/png\", plt), \"gemm.png\", \"w\")","category":"page"},{"location":"gemm/#","page":"GEMM","title":"GEMM","text":"(Image: )","category":"page"},{"location":"gemm/#Transducers-vs-manual-implementation-1","page":"GEMM","title":"Transducers vs manual implementation","text":"","category":"section"},{"location":"gemm/#","page":"GEMM","title":"GEMM","text":"using BenchmarkTools\nusing PkgBenchmark: benchmarkgroup, export_markdown\nusing TransducersBenchmarksReports: loadresult\nusing Setfield: @set\nusing Markdown\n\nresults = loadresult()\ngroup = benchmarkgroup(results)[\"gemm\"]\nresults_xf = @set results.benchmarkgroup = group[\"xf\"]\nresults_man = @set results.benchmarkgroup = group[\"man\"]\n\nlet md = sprint(export_markdown, judge(results_xf, results_man))\n    md = replace(md, \":x:\" => \"❌\")\n    md = replace(md, \":white_check_mark:\" => \"✅\")\n    Markdown.parse(md)\nend","category":"page"}]
}
